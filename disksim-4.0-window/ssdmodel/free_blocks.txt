include/ssdmodel/ssd.h:    int free_blocks;                // num of free blocks in this plane
include/ssdmodel/ssd.h:    char *free_blocks;              // each bit indicates whether a block in the
include/ssdmodel/ssd.h:                                    // in free_blocks is given by
include/ssdmodel/ssd.h:    unsigned int tot_free_blocks;   // total number of free blocks in the system. i'm
include/ssdmodel/ssd.h:                                    // computed from the above free_blocks list.
ssd_clean.c:    metadata->tot_free_blocks ++;   // done
ssd_clean.c:    metadata->plane_meta[plane_num].free_blocks ++; // done
ssd_clean.c:    metadata->tot_free_blocks --; // done
ssd_clean.c:    metadata->plane_meta[metadata->block_usage[to_blk].plane_num].free_blocks --; // done
ssd_clean.c:        return (s->elements[elem_num].metadata.tot_free_blocks <= low); //TODO: not sure
ssd_clean.c:        return (s->elements[elem_num].metadata.plane_meta[plane_num].free_blocks <= low); // TODO: not sure
ssd_clean.c:        return (s->elements[elem_num].metadata.tot_free_blocks > high); //TODO
ssd_clean.c:        return (s->elements[elem_num].metadata.plane_meta[plane_num].free_blocks > high); // TODO
ssd.h:    int free_blocks;                // num of free blocks in this plane
ssd.h:                                    // in free_blocks is given by
ssd.h:    unsigned int tot_free_blocks;   // total number of free blocks in the system. i'm
ssd.h:                                    // computed from the above free_blocks list.
ssd_init.c:    metadata->tot_free_blocks = reserved_blocks;
ssd_init.c:        metadata->tot_free_blocks * SSD_DATA_PAGES_PER_BLOCK(currdisk);
ssd_init.c:        metadata->plane_meta[i].free_blocks = reserved_blocks_per_plane;
ssd_init.c:    if (!(metadata->free_blocks = (unsigned char *)malloc(bytes_to_alloc))) {
ssd_init.c:        fprintf(stderr, "Error: malloc to free_blocks in ssd_element_metadata_init failed\n");
ssd_init.c:    bzero(metadata->free_blocks, bytes_to_alloc);
ssd_init.c:            ssd_set_bit(metadata->free_blocks, bitpos);
ssd_init.c:            ssd_set_bit(metadata->free_blocks, bitpos);
ssd_init.c:                ssd_set_bit(metadata->free_blocks, bitpos);
ssd_init.c:                metadata->tot_free_blocks --;
ssd_init.c:                metadata->plane_meta[i].free_blocks --;
ssd_timing.c:        if (!ssd_bit_on(metadata->free_blocks, i)) {
ssd_timing.c:    ASSERT(f1 == metadata->plane_meta[plane_num].free_blocks);
ssd_timing.c:        tmp += metadata->plane_meta[i].free_blocks;
ssd_timing.c:    ASSERT(metadata->tot_free_blocks == tmp);
ssd_timing.c:    unsigned char *free_blocks = metadata->free_blocks;
ssd_timing.c:    bitpos = ssd_find_zero_bit(free_blocks, s->params.blocks_per_element, prev_pos);
ssd_timing.c:            bitpos = ssd_find_zero_bit(free_blocks, s->params.blocks_per_element, prev_pos);
ssd_timing.c:        metadata->tot_free_blocks --;
ssd_timing.c:        pm->free_blocks --;
ssd_timing.c:        ssd_set_bit(free_blocks, bitpos);
ssd_timing.c:                        tmp = pm->free_blocks * s->params.pages_per_block + free_pages_in_act_blk;
